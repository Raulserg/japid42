h1. japid42 - Japid for Play 2

Bing Ran (bing.ran@gmail.com)


Status: beta



h2. About

This is a port of Japid to the Play2 framework.  

The idea is to have a native Java based template engine for Java programmers using Play2. 

Some of the benefits of using Japid in Play2:

1. No latency in reloading changed views. You simply change the views and refresh your browser to get it right away in literally a blink instead of a coffee break. Japid manages its own view compilation and class loading. Changes in the Japid views are isolated from the Play reloading mechanism. 

2. Full featured. It at least matches the feature set of the built-in Scala based template engine. 

3. Excellent runtime performance. 

4. Java-based, thus very friendly to Java programmers.

5. The core Japid has been used in production for a long time and is very robust.  


h2. Features

Most of the Japid 1 features have been ported:

- layout
- tags
- action invocations from views
- implicit objects available in views: request, response, session, flash
- other language constructs

What are missing?

- cache with action invocation, i.e., the @`a@ command does not support cache yet.
- validation: I'm still investigating how the whole validation thing works in Play2. 
- Flash success/error: the new flash in Play2 is a generic HashMap. 
- session.authentityToken not supported
- implicit objects: params, args
- pretty error page for japid errors, compile time or runtime. 

What are different?

- reverse routing: @{} not supported and deprecated by Play2's direct route class call for each route rule. 

h2. Build the module from source

1. Git clone the Japid42 project to your local computer. 
2. Build it and publish it to your local repository: "play publish-local", where the play is the Play2 binary. 

Note:

- I'm using sbt 0.11.3 locally. Match the sbt version in the "project/build.properties" file to yours . 
- Also check and match the sbt-plugin version in the "project/plugins.sbt" file to your local version. 

h2. Hack Japid42 in Eclipse

1. In the root directory of japid42: play eclipse 
2. import the project in Eclipse. 
3. Fix the missing classes_managed folder as reported. 


h2. Usage


Please check out the JapidSample project in the samples directory for an example. 

Basically you'll need to do three things:

0. Get the dependencies

- declare Japid in the project/Build.scala:
<pre>
//...
    val appDependencies = Seq(
      // Add your project dependencies here,
      "japid42" % "japid42_2.9.1" % "0.2.2"
    )

    val main = PlayProject(appName, appVersion, appDependencies, mainLang = JAVA).settings(
      // Add your own project settings here  
      resolvers += "Local Play Repository" at "/my/path/to/Play20/repository/local"
    )
//...
</pre>

Note: adjust the version number accordingly. 

- copy the javaparser-1.0.8.jar and org.eclipse.jdt.core-3.8.0.v_C18.jar from the lib directory to the lib directory in your project. 

1. Initialize Japid in Global.java in the app directory:

<pre>
//...
public class Global extends GlobalSettings {
    @Override
    public void onStart(Application app) {
		JapidRenderer.init(app.isDev() ? OpMode.dev : OpMode.prod, "japidroot", 3, app);
		JapidRenderer.addImportStatic(StringUtils.class);
		JapidRenderer.setLogVerbose(true);
		JapidRenderer.gen();
    }
    //...
}
</pre>  

Note:


- The "japidroot" in the init line in the method can be any path you like. It's a folder in the application root and it contains all the japid artifacts. Importantly it needs to be outside of the app directory. 

- The addImportStatic line is up to you if you need to include some implicit imports in all the japid views. 

- Since version 0.2.2, there is a simpler version of init that takes just the app as the argument and use the values in the sample as defaults. So you can do
  <pre>
  JapidRenderer.init(app);
  </pre> 
   
   
   
2. Extend JapidController to create your own controllers and use the renderJapid(...) etc to render the views. These views are in the japid root directory in a similar directory structure as the the controller hierarchy. 


For detailed Japid grammar please refer to the Japid 1 manual before I write something formal： 

－ https://github.com/branaway/Japid/wiki

h2. A sample application

There is a sample application in the sample/JapidSample. Please update the dependency entry in the project/Build.scala file. 

h2. History

2012.3.24: v0.1
# initial commit. 
2012.3.27: v0.2
# lots of fix and the JapidSample mostly works now.  
2012.4.4: v0.2.1
# added JapidRenderer.setLogVerbose() to control logging verbosity of Japid activities.
2012.7.28: v0.2.2
# updated the README and fixed the initialization part. 
2012.7.28: v0.3
# bug fix: import of empty _tags or _layouts caused compiler error. Now imports those packages only if there are any templates in the folders.
# enhancement: updated build files to work with play-2.0.3 release.
2012.10.12. v0.4, beta
# made it play 2.0.4 compatible
# major bug fix: class reloading on the controller side or the model side caused type mismatched problem. 
 