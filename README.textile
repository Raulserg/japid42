h1. japid42 - Japid for Play 2

Bing Ran (bing.ran@gmail.com)

version 0.5.5
Status: beta
Compatibility: Play 2.0.4


h2. About

Japid42 is a native Java based template engine for Java programmers using Play2. 

# Very fast in reloading changed views. You simply change the views and refresh your browser to get it right away in a blink instead of taking a coffee break. Japid manages its own view compilation and class loading. Changes in the Japid views are isolated from the Play reloading mechanism. 
# Full featured. It at least matches the feature set of the built-in Scala based template engine. 
# Excellent runtime performance. 
# Java-based, thus very friendly to Java programmers.
# The core Japid has been used in production for a long time and is very robust.  
# Japid views compile lazy and compile on demand. 

h2. Features

- freely mixing Java code in templates.
- layout inheritance
- tags and local snippet
- controller action invocations from within views
- implicit objects available in views: request, response, session, flash, lang
- all sorts of directives
- support Play2 forms, fields, data binding and form validations. 


What are missing?

- cache with action invocation, i.e., the @`a@ command does not support cache yet.
- session.authentityToken not supported

What are different?

- reverse routing: @{} not supported and deprecated by Play2's direct route class call for each route rule. 


h2. Usage



h4. For a full sample application with Japid, see: http://github.com/branaway/computer-japid

Please also check out the JapidSample project in the samples directory for an example. 

Basically you'll need to do three things:

0. Get the dependencies

- declare Japid in the project/Build.scala and add the local repository resolver:
<pre>
//...
    val appDependencies = Seq(
      "japid42" % "japid42_2.9.1" % "0.5.5"
    )

    val main = PlayProject(appName, appVersion, appDependencies, mainLang = JAVA).settings(
      resolvers += Resolver.url("My GitHub Play Repository", url("http://branaway.github.com/releases/"))(Resolver.ivyStylePatterns)
    )
//...
</pre>

Note: adjust the version number accordingly. 

1. Initialize Japid in Global.java in the app directory:

<pre>

import play.Application;
import play.GlobalSettings;
import cn.bran.japid.template.JapidRenderer;

public class Global extends GlobalSettings {
	@Override
	public void onStart(Application app) {
		JapidRenderer.init(app);
	}
}
</pre>  

Note:


- There are a few things that can be customized. Please see the javadoc of JapidRenderer. 
   

2. Extend cn.bran.play.JapidController to create your own controllers and use the renderJapid(...) etc to render the views. 

<pre>
package controllers;

import play.mvc.Result;
import cn.bran.play.JapidController;

public class Application extends JapidController {
  
  public static Result index() {
	  return renderJapid("cool");
  }
}
</pre>

3. Create the Japid view script "japidroot/japidviews/Application/index.html":

<pre>
@(String m)
alright: $m!
</pre>

4. Hit http://localhost:9000/ to see Japid at work!

h2. Using Japid in Sub-projects

In Build.scala, you may have a sub-project defined like this:

<pre><code>
    val appDependencies = Seq(
      "japid42" % "japid42_2.9.1" % "0.5.4"
    )

    val foo = PlayProject("foo", "0.1", appDependencies, path = file("modules/foo"))

    val main = PlayProject(appName, appVersion, appDependencies, mainLang = JAVA).settings(
      resolvers += Resolver.url("Japid on Github", url("http://branaway.github.com/releases/"))(Resolver.ivyStylePatterns)
    ).dependsOn(foo)
    
</code></pre>

Obviously you have a sub-project located in modules/foo. For the system to know the Japid scripts in the sub-project, you'll need to tell Japid the location, using the JapidRenderer.setTemplateRoot(String...) method, in the global initialization method:

<pre><code>
public class Global extends GlobalSettings {
    @Override
	public void onStart(Application app) {
		JapidRenderer.init(app);
		JapidRenderer.setTemplateRoot("japidroot", "modules/foo/japidroot");
    }
}
</code></pre>

In the above example, the first argument is the location of the Japid scripts in the parent project. The second argument is the root for the Japid scripts in the sub-project. All paths are relative to the root of the master project. 

The @computer-japid@(http://github.com/branaway/computer-japid) sample application demos this feature. 

h2. Documentation

The "computer-japid" sample project contains a README file that explains most of the Japid usage. Please refer to it. 

For detailed Japid grammar please refer to the Japid 1 manual before I write something formal： 

－ https://github.com/branaway/Japid


h2. Sample applications

* http://github.com/branaway/computer-japid
* There is also a sample application in the sample/JapidSample. Please update the dependency entry in the project/Build.scala file. 


h2. Hacking Japid42 in Eclipse

1. Git clone the Japid42 project to your local computer. 
2. Build it and publish it to your local repository: "play publish-local", where the play is the Play2 binary. 

Note:

- I'm using sbt 0.11.3 locally. Match the sbt version in the "project/build.properties" file to yours . 
- Also check and match the sbt-plugin version in the "project/plugins.sbt" file to your local version. 


h2. History

2012.3.24: v0.1
# initial commit. 

2012.3.27: v0.2
# lots of fix and the JapidSample mostly works now.  

2012.4.4: v0.2.1
# added JapidRenderer.setLogVerbose() to control logging verbosity of Japid activities.

2012.7.28: v0.2.2
# updated the README and fixed the initialization part. 

2012.7.28: v0.3
# bug fix: import of empty _tags or _layouts caused compiler error. Now imports those packages only if there are any templates in the folders.
# enhancement: updated build files to work with play-2.0.3 release.

2012.10.12. v0.4, beta
# made it play 2.0.4 compatible
# major bug fix: class reloading on the controller side or the model side caused type mismatched problem. 

2012.10.17. v0.5
# major feature: added nice error reporting.  
# bug fix: htmlentities.properties file moved to conf

2012.10.23. v0.5.1
# enhancement: hide the template for dev error reporting from users. The side effect is users cannot customize the error reporting at dev time. 
# removed: removed _javatags, _errors special directories in japidviews folder. 
# added: ported some util methods from Play 1's JavaExtensions to WebUtils. 
# enhancement: merged Yuvi Masory's JDT compiler dependency change

2012.10.23. v0.5.2
# bug fix: error reporting of argument mismatch in calling Japid views from controller. 
# enhancement: added toString() to JapidResult so it can be used directly in Japid views as the result of directly calling a controller method. For an example, one can include the result of an action call directly in a script like this:
	<code>the value is $MyController.action(...).</code>
	
2012.11.1. v0.5.3
# enhancement: since I started using the Github pages as the repository, the readme file started referencing the resolver to it instead of local.  

2012.11.8. v0.5.4
# new feature: added JapidRenderer.setTemplateRoot(String...) that takes one or more japid roots. With this support, Japid can be used in project/sub-project layout.

2012.11.10. v0.5.5
# bug fix: failed to create folders matching controllers in mkdir()
# critical bug fix: play start did not work. Class was not found. 